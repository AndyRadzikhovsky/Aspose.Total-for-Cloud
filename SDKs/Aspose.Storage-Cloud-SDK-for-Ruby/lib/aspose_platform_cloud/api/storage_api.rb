=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposePlatformCloud
  class StorageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Check the disk usage of the current account. Parameters: storage - user's storage name.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @return [DiscUsageResponse]
    def storage_get_disc_usage(opts = {})
      data, _status_code, _headers = storage_get_disc_usage_with_http_info(opts)
      return data
    end

    # Check the disk usage of the current account. Parameters: storage - user&#39;s storage name.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @return [Array<(DiscUsageResponse, Fixnum, Hash)>] DiscUsageResponse data, response status code and response headers
    def storage_get_disc_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorageApi.storage_get_disc_usage ..."
      end
      # resource path
      local_var_path = "/storage/disc"

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscUsageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_get_disc_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if a specific file or folder exists.Parameters: path - file or folder path e.g. /file.ext or /Folder1, versionID - file's version, storage - user's storage name.
    # 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_id 
    # @option opts [String] :storage 
    # @return [FileExistResponse]
    def storage_get_is_exist(path, opts = {})
      data, _status_code, _headers = storage_get_is_exist_with_http_info(path, opts)
      return data
    end

    # Check if a specific file or folder exists.Parameters: path - file or folder path e.g. /file.ext or /Folder1, versionID - file&#39;s version, storage - user&#39;s storage name.
    # 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version_id 
    # @option opts [String] :storage 
    # @return [Array<(FileExistResponse, Fixnum, Hash)>] FileExistResponse data, response status code and response headers
    def storage_get_is_exist_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorageApi.storage_get_is_exist ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling StorageApi.storage_get_is_exist"
      end
      # resource path
      local_var_path = "/storage/exist/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileExistResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_get_is_exist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if storage exists. 
    # 
    # @param name Storage name
    # @param [Hash] opts the optional parameters
    # @return [StorageExistResponse]
    def storage_get_is_storage_exist(name, opts = {})
      data, _status_code, _headers = storage_get_is_storage_exist_with_http_info(name, opts)
      return data
    end

    # Check if storage exists. 
    # 
    # @param name Storage name
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageExistResponse, Fixnum, Hash)>] StorageExistResponse data, response status code and response headers
    def storage_get_is_storage_exist_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorageApi.storage_get_is_storage_exist ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling StorageApi.storage_get_is_storage_exist"
      end
      # resource path
      local_var_path = "/storage/{name}/exist".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageExistResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_get_is_storage_exist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the file's versions list. Parameters: path - file path e.g. /file.ext or /Folder1/file.ext, storage - user's storage name.
    # 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @return [FileVersionsResponse]
    def storage_get_list_file_versions(path, opts = {})
      data, _status_code, _headers = storage_get_list_file_versions_with_http_info(path, opts)
      return data
    end

    # Get the file&#39;s versions list. Parameters: path - file path e.g. /file.ext or /Folder1/file.ext, storage - user&#39;s storage name.
    # 
    # @param path 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @return [Array<(FileVersionsResponse, Fixnum, Hash)>] FileVersionsResponse data, response status code and response headers
    def storage_get_list_file_versions_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorageApi.storage_get_list_file_versions ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling StorageApi.storage_get_list_file_versions"
      end
      # resource path
      local_var_path = "/storage/version/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileVersionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_get_list_file_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
