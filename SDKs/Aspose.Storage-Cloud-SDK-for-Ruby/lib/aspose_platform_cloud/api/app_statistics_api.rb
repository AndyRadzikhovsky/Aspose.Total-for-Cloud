=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposePlatformCloud
  class AppStatisticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get service statistics in HTML form.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_with_http_info(opts)
      return data
    end

    # Get service statistics in HTML form.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics ..."
      end
      # resource path
      local_var_path = "/statistics"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get API calls statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_api(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_api_with_http_info(opts)
      return data
    end

    # Get API calls statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_api_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_api ..."
      end
      # resource path
      local_var_path = "/statistics/calls"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get statistics for specific dates by hours.
    # 
    # @param start_date The start date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date The end date.
    # @return [File]
    def app_statistics_get_statistics_by_hours(start_date, opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_by_hours_with_http_info(start_date, opts)
      return data
    end

    # Get statistics for specific dates by hours.
    # 
    # @param start_date The start date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date The end date.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_by_hours_with_http_info(start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_by_hours ..."
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling AppStatisticsApi.app_statistics_get_statistics_by_hours"
      end
      # resource path
      local_var_path = "/statistics/hours"

      # query parameters
      query_params = {}
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_by_hours\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get statistics for last 30 days by hours.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_by_hours_for_last30_days(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_by_hours_for_last30_days_with_http_info(opts)
      return data
    end

    # Get statistics for last 30 days by hours.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_by_hours_for_last30_days_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_by_hours_for_last30_days ..."
      end
      # resource path
      local_var_path = "/statistics/hours/last30Days"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_by_hours_for_last30_days\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get clients with overdraft statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_current_users(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_current_users_with_http_info(opts)
      return data
    end

    # Get clients with overdraft statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_current_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_current_users ..."
      end
      # resource path
      local_var_path = "/statistics/currentUsers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_current_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get last errors statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_errors(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_errors_with_http_info(opts)
      return data
    end

    # Get last errors statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_errors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_errors ..."
      end
      # resource path
      local_var_path = "/statistics/errors"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get free users statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_free(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_free_with_http_info(opts)
      return data
    end

    # Get free users statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_free_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_free ..."
      end
      # resource path
      local_var_path = "/statistics/free"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_free\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get service statistics in HTML form like GroupDocs.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_like_gd(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_like_gd_with_http_info(opts)
      return data
    end

    # Get service statistics in HTML form like GroupDocs.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_like_gd_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_like_gd ..."
      end
      # resource path
      local_var_path = "/statistics/likeGD"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_like_gd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get clients with overdraft statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_overdraft(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_overdraft_with_http_info(opts)
      return data
    end

    # Get clients with overdraft statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_overdraft_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_overdraft ..."
      end
      # resource path
      local_var_path = "/statistics/overdrafts"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_overdraft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get paid clients statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_paid(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_paid_with_http_info(opts)
      return data
    end

    # Get paid clients statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_paid_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_paid ..."
      end
      # resource path
      local_var_path = "/statistics/paid"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_paid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get users with plans statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def app_statistics_get_statistics_plans(opts = {})
      data, _status_code, _headers = app_statistics_get_statistics_plans_with_http_info(opts)
      return data
    end

    # Get users with plans statistics.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def app_statistics_get_statistics_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AppStatisticsApi.app_statistics_get_statistics_plans ..."
      end
      # resource path
      local_var_path = "/statistics/plans"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppStatisticsApi#app_statistics_get_statistics_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
